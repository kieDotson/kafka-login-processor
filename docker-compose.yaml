version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    networks:
      - kafka-network
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka:9092,LISTENER_EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  my-python-producer:
    image: mpradeep954/fetch-de-data-gen
    depends_on:
      - kafka
    restart: on-failure:10
    ports:
      - 9093:9093
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: user-login
    networks:
      - kafka-network
      
  # Kafka Topic Creation Service
  kafka-topic-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    networks:
      - kafka-network
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        kafka-topics --bootstrap-server kafka:9092 --list &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 6 --replication-factor 1 --topic user-login &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 6 --replication-factor 1 --topic processed-logins &&
        echo 'Kafka topics created' &&
        kafka-topics --bootstrap-server kafka:9092 --list
      "

  # Our consumer/processor service
  login-processor:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - kafka-topic-setup
    restart: on-failure:5
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      INPUT_TOPIC: user-login
      OUTPUT_TOPIC: processed-logins
      CONSUMER_GROUP: login-processor-group
    networks:
      - kafka-network
  
  # Streamlit dashboard
  streamlit-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    ports:
      - "8501:8501"
    depends_on:
      - kafka
      - login-processor
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      METRICS_TOPIC: metrics
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge